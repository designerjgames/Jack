// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/12/Memory.jack

/**
 * Memory operations library.
 */ 
class Memory 
{
	static int s_Variable;
	static int s_address;
	static int s_x;
	static int s_y;
	static int s_value;
	 
    /** Initializes memory parameters. */
    function void init() 
	{
		asm
		{
			push ecx;
	        push edx;
	        push edi;
	        push esi;
			
			INVOKE GetProcessHeap;
			
			pop esi;
	        pop edi;
	        pop edx;
	        pop ecx;
			
			mov HeapHandle, eax;
		}
	
		return;
    }

    /** Returns the value of the main memory at the given address. */
    function int peek(int address) 
	{
		var int i;
		var int pixel;
		var int value;
		var int tmpx;
		var int tmpy;
		let s_x       = 0;
		let s_y       = 0;
		let s_address = address - 16384;
		if( (address >= 16384) & (address < 24576) )
		{
			// Screen manipulation (32(16bits)*256) 
			// Get X and Y from address
			asm
			{
				push ecx;
				push edx;
				push edi;
				push esi;
				
				xor  edx, edx       ;
				mov  eax, Memory$1  ;
				mov  ebx, 32        ;
				div  ebx            ;
				mov  Memory$3, eax  ;
				imul eax, edx, 16   ;
				mov  Memory$2, eax  ;
				
				pop esi;
				pop edi;
				pop edx;
				pop ecx;
			}
			
			let tmpx = s_x;
			let tmpy = s_y;
			
			let i     = 1;
			let pixel = 0;
			let value = 0;
			while( i < 65536 )
			{
				if( Memory.GetPixel( tmpx + pixel, tmpy) = 0 )
				{
					let value = value | i;
				}
				
				let i     = i + i;
				let pixel = pixel + 1;
			}
		}
		else 
		{
			if( address = 24576 )
			{
			asm
			{
				push ecx;
				push edx;
				push edi;
				push esi;
				
				mov eax, VKCode;
				cmp eax, 0;
				je Memory$out;
				invoke GetKeyboardState, offset KeyState;
				cmp eax, 0;
				jne $getAscii$;
				mov Memory$4, eax;
				jmp Memory$out;
				$getAscii$:;
				invoke GetKeyboardLayout, NULL;
				mov layout, eax;
				push VKCode;
				mov eax, offset Keyboard$TranslateVKCode;
				mov ebx, eax;
				mov esi, 4;
				mov eax, offset Keyboard_RTT_0;
				jmp ebx;
				Keyboard_RTT_0:;
				pop eax;
				cmp eax, 0;
				je WndProc_GetAsscii;
				mov Memory$4, eax;
				jmp Memory$out;
				WndProc_GetAsscii:;
				invoke MapVirtualKeyEx, VKCode, MAPVK_VK_TO_VSC, layout;
				mov ebx, eax;
				mov Memory$4, 0;
				invoke ToAsciiEx , VKCode, ebx, offset KeyState ,offset Memory$4, 0, layout;
				Memory$out: ;
				
				pop esi;
				pop edi;
				pop edx;
				pop ecx;
			}
			let value = s_value;
			}
		}
		
		return value;
    }

    /** Sets the value of the main memory at this address
     *  to the given value. */
    function void poke(int address, int value)
	{
		var int i;
		var int pixel;
		var int tmpx;
		var int tmpy;
		let s_x       = 0;
		let s_y       = 0;
		let s_address = address - 16384;
		if( (address >= 16384) & (address < 24576) )
		{
			// Screen manipulation (32(16bits)*256) 
			// Get X and Y from address
			asm
			{
				push ecx;
				push edx;
				push edi;
				push esi;
			
				xor  edx, edx       ;
				mov  eax, Memory$1  ;
				mov  ebx, 32        ;
				div  ebx            ;
				mov  Memory$3, eax  ;
				imul eax, edx, 16   ;
				mov  Memory$2, eax  ;
				
				pop esi;
				pop edi;
				pop edx;
				pop ecx;
			}
			
			let tmpx = s_x;
			let tmpy = s_y;
			
			let i     = 1;
			let pixel = 0;
			while( i < 65536 )
			{
				if( (value & i) = i  )
				{
					//Black
					do Memory.SetPixel( tmpx + pixel, tmpy, 0);
				}
				else
				{
					//White
					do Memory.SetPixel( tmpx + pixel, tmpy, 16777215);
				}
				
				let i     = i + i;
				let pixel = pixel + 1;
			}
		}

		return;
    }
	
	function void SetPixel( int x, int y, int color)
	{
		let s_x        = x;
		let s_y        = y;
		let s_value    = color;
		
		asm
		{
			push ecx;
			push edx;
			push edi;
			push esi;
					
			mov eax, Memory$2;
			mov rct.left, eax;
			inc eax;
			mov rct.right, eax;
			mov eax, Memory$3;
			mov rct.top, eax;
			inc eax;
			mov rct.bottom, eax;
			cmp Memory$4, 0;
			je $black$;
			invoke FillRect, BackBufferDeviceContextHandle, offset rct, hWhitePixel;
			jmp $white$;
			$black$:;
			invoke FillRect, BackBufferDeviceContextHandle, offset rct, hBlackPixel;
			$white$:;
			
			pop esi;
			pop edi;
			pop edx;
			pop ecx;
		}
		
		return;
	}
	
	function int GetPixel( int x, int y)
	{
		let s_x     = x;
		let s_y     = y;
	
		asm
		{
			push ecx;
			push edx;
			push edi;
			push esi;

			invoke SelectObject, BackBufferDeviceContextHandle, hBitmap;	
			push Memory$3;
			push Memory$2;	
			push BackBufferDeviceContextHandle;
			call GetPixel;
			mov Memory$4, eax;
			
			pop esi;
			pop edi;
			pop edx;
			pop ecx;
		}
		
		return s_value;
	}
	
	/** finds and allocates from the heap a memory block of the 
	*  specified size and returns a reference to its base address. */
    function int alloc(int size) 
	{
		let s_Variable = size;
		asm
		{
			imul eax, Memory$0, 4;
			push ecx;
	        push edx;
	        push edi;
	        push esi;
			
			push eax;
			push HEAP_ZERO_MEMORY;
			push HeapHandle;
			call HeapAlloc;
			
			pop esi;
	        pop edi;
	        pop edx;
	        pop ecx;
			
			mov  Memory$0, eax;
		}
		return s_Variable;
    }
	
	/** De-allocates the given object and frees its space. */
    function void deAlloc(int objectAddress) 
	{
		let s_Variable = objectAddress;
		asm
		{
			push ecx;
	        push edx;
	        push edi;
	        push esi;
			
			push Memory$0;
			push 0;
			push HeapHandle;
			call HeapFree;
			
			pop esi;
	        pop edi;
	        pop edx;
	        pop ecx;
		}
		
		return;
    }  
}
