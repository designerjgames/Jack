#ifndef _VM_TOKENIZER_
#define _VM_TOKENIZER_

#include "Tokenizer.h"

class VMTokenizer : public Tokenizer
{
public:
	enum KEYWORD_TYPE
	{
		KEYWORD_INVALID,
		COMMAND_ARITHMETIC_EQ,
		COMMAND_ARITHMETIC_GT,
		COMMAND_ARITHMETIC_LT,
		COMMAND_ARITHMETIC_GE,
		COMMAND_ARITHMETIC_LE,
		COMMAND_ARITHMETIC_OR,
		COMMAND_ARITHMETIC_ADD,
		COMMAND_ARITHMETIC_SUB,
		COMMAND_ARITHMETIC_NEG,
		COMMAND_ARITHMETIC_AND,
		COMMAND_ARITHMETIC_NOT,
		COMMAND_PUSH,
		COMMAND_PUSH_ADDRESS,
		COMMAND_POP,
		COMMAND_LABEL,
		COMMAND_GOTO,
		COMMAND_IF,
		COMMAND_FUNCTION,
		COMMAND_CALL,
		COMMAND_CALL_VIRTUAL,
		COMMAND_RETURN,
		COMMAND_PUSH_FUNCTION,
		COMMAND_ASM,
		COMMAND_MEMORY,
		
		RAM_SEGMENT_STATIC,
		RAM_SEGMENT_THIS,
		RAM_SEGMENT_LOCAL,
		RAM_SEGMENT_ARGUMENT,
		RAM_SEGMENT_THAT,
		RAM_SEGMENT_CONSTANT,
		RAM_SEGMENT_POINTER,
		RAM_SEGMENT_TEMP
	};

	VMTokenizer(const std::string& xSource, bool bIsString = false);

	static KEYWORD_TYPE GetKeywordType(const std::string& xKeyword);
	static const char*  GetKeywordString(KEYWORD_TYPE eKeywordType);

private:
	virtual TOKEN_TYPE FindTokenType(const std::string& xToken) const;
};

#endif // _VM_TOKENIZER_